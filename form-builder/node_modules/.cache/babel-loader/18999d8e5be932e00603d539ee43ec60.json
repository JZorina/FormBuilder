{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\User\\\\Desktop\\\\react\\\\form-builder\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\react\\\\form-builder\\\\src\\\\components\\\\FormViewer.js\";\nimport React from 'react';\nimport unsplash from '../api/unsplash';\nimport FieldsViewer from './FieldsViewer';\nvar result;\n\nclass FormViewer extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.componentDidMount = async () => {\n      this.getFormDetails();\n    };\n\n    this.onFormSubmit = e => {\n      //prevent the page refreshing every 'enter' press \n      e.preventDefault();\n    };\n\n    this.nextPath = path => {\n      this.props.history.push(path);\n    };\n\n    this.SaveForm = e => {\n      unsplash.post(\"/SaveData\", {\n        data: this.state.formData,\n        id: this.state.id\n      }).then(response => {\n        if (response.success) console.log(\"Data submitted successfully: \", response); // else\n        // console.log(\"NO SUCESS! \",response);\n      }).catch(error => {\n        console.log(\"got errr while posting data\", error);\n      });\n      this.resetForm();\n    };\n\n    this.ChangeVal = (label, e) => {\n      const fields = _objectSpread({}, this.state.formData);\n\n      fields[label] = e.target.value;\n      this.setState({\n        formData: fields\n      });\n    };\n\n    this.state = {\n      id: props.match.params.id,\n      Schema: [],\n      flag: false,\n      formData: []\n    };\n    this.initialStateformData = _objectSpread({}, this.state.formData);\n  }\n\n  async getFormDetails() {\n    await unsplash.post('/getFormSchema', {\n      id: this.props.match.params.id\n    }).then(response => {\n      if (response.data.success === true) {\n        var schema = JSON.parse(response.data.data[0].formSchema);\n        this.setState({\n          Schema: schema\n        });\n        this.setState({\n          flag: true\n        });\n      } else console.log(response);\n    }).catch(error => {\n      console.log(\"got error while posting data\", error);\n    });\n    console.log(this.state.Schema);\n  }\n\n  resetForm() {\n    var empty = {};\n    this.setState({\n      formData: this.initialStateformData\n    });\n    console.log(this.state);\n  }\n\n  render() {\n    if (this.state.flag) {\n      result = this.state.Schema.properties.map((item, index) => {\n        return React.createElement(FieldsViewer, {\n          key: index,\n          label: item.label,\n          type: item.type,\n          handleChange: this.ChangeVal.bind(this, item.label),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 80\n          },\n          __self: this\n        });\n      });\n    }\n\n    return React.createElement(\"div\", {\n      className: \"ui segment\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      className: \"ui header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }, this.state.Schema.title)), React.createElement(\"form\", {\n      onSubmit: this.onFormSubmit,\n      className: \"ui form\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }, this.state.flag && [result], React.createElement(\"button\", {\n      type: \"submit\",\n      style: {\n        marginTop: \"50px\"\n      },\n      className: \"ui button\",\n      onClick: this.SaveForm,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }, \"Done!\")), React.createElement(\"button\", {\n      style: {\n        marginTop: \"50px\"\n      },\n      className: \"ui button\",\n      onClick: () => this.nextPath('/'),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }, \"Back\"));\n  }\n\n}\n\nexport default FormViewer;","map":{"version":3,"sources":["C:\\Users\\User\\Desktop\\react\\form-builder\\src\\components\\FormViewer.js"],"names":["React","unsplash","FieldsViewer","result","FormViewer","Component","constructor","props","componentDidMount","getFormDetails","onFormSubmit","e","preventDefault","nextPath","path","history","push","SaveForm","post","data","state","formData","id","then","response","success","console","log","catch","error","resetForm","ChangeVal","label","fields","target","value","setState","match","params","Schema","flag","initialStateformData","schema","JSON","parse","formSchema","empty","render","properties","map","item","index","type","bind","title","marginTop"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport unsplash from '../api/unsplash';\r\nimport FieldsViewer from './FieldsViewer';\r\nvar result;\r\nclass FormViewer extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            id:props.match.params.id,\r\n            Schema:[],\r\n            flag:false,\r\n            formData:[]\r\n\r\n        }\r\n        this.initialStateformData = { ...this.state.formData } \r\n    }\r\n     componentDidMount=async()=>{\r\n        this.getFormDetails();\r\n    }\r\n    async getFormDetails(){\r\n        await unsplash.post('/getFormSchema',{\r\n            id:this.props.match.params.id\r\n        }).then((response)=> {\r\n            if(response.data.success===true){\r\n                var schema=JSON.parse(response.data.data[0].formSchema);\r\n                this.setState({Schema:schema});\r\n                this.setState({flag:true});\r\n            }\r\n            else\r\n            console.log(response);\r\n    }).catch((error)=> {\r\n        console.log(\"got error while posting data\", error);\r\n     });\r\n     console.log(this.state.Schema);\r\n    }\r\n    onFormSubmit=(e)=>{\r\n        //prevent the page refreshing every 'enter' press \r\n        e.preventDefault();\r\n\r\n    }\r\n    nextPath=(path)=>{\r\n        this.props.history.push(path);\r\n    }\r\n    SaveForm=(e)=>\r\n    {\r\n        unsplash.post(\"/SaveData\",{\r\n            data: this.state.formData,\r\n            id:this.state.id\r\n        }).then((response)=> {\r\n            if(response.success)\r\n                console.log(\"Data submitted successfully: \", response);\r\n                \r\n\r\n\r\n                // else\r\n                // console.log(\"NO SUCESS! \",response);\r\n        }).catch((error)=> {\r\n           console.log(\"got errr while posting data\", error);\r\n        });\r\n        \r\n        this.resetForm();\r\n    }\r\n    ChangeVal=(label,e)=>{\r\n\r\n        const fields={...this.state.formData}\r\n        fields[label]= e.target.value;\r\n        this.setState({formData:fields});\r\n    }\r\n\r\n    resetForm(){\r\n        var empty={};\r\n        this.setState({formData:  this.initialStateformData });\r\n        console.log(this.state);\r\n    }\r\n    render(){  \r\n        if(this.state.flag){\r\n            result=this.state.Schema.properties.map((item, index)=>{\r\n\r\n                return(\r\n                <FieldsViewer\r\n                    key={index} \r\n                    label={item.label}\r\n                    type={item.type}\r\n                    handleChange={this.ChangeVal.bind(this, item.label)}\r\n\r\n                        />\r\n            \r\n                        )})\r\n            }\r\n        return(\r\n            <div className=\"ui segment\">\r\n                <div >\r\n                    <h1 className=\"ui header\">{this.state.Schema.title}</h1>\r\n                </div>\r\n                <form onSubmit={this.onFormSubmit}  className=\"ui form\"> \r\n                {     \r\n                      this.state.flag && [result]\r\n                }\r\n                 <button \r\n                    type='submit'\r\n                    style={{marginTop:\"50px\" }}\r\n                    className=\"ui button\"\r\n                    onClick={this.SaveForm}>\r\n                       Done!\r\n                    </button>\r\n                </form>\r\n                <button \r\n                style={{marginTop:\"50px\" }}\r\n                className=\"ui button\"\r\n                onClick={()=>this.nextPath('/')}>\r\n                    Back\r\n            </button>   \r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default FormViewer;\r\n"]},"metadata":{},"sourceType":"module"}