{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\User\\\\Desktop\\\\react\\\\formBuilder\\\\form-builder\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\react\\\\formBuilder\\\\form-builder\\\\src\\\\components\\\\FormViewer.js\";\nimport React from 'react';\nimport unsplash from '../api/unsplash';\nimport FieldsViewer from './FieldsViewer';\nvar result;\n\nclass FormViewer extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.componentDidMount = async () => {\n      this.getFormDetails();\n    };\n\n    this.onFormSubmit = e => {\n      //prevent the page refreshing every 'enter' press \n      e.preventDefault();\n    };\n\n    this.nextPath = path => {\n      this.props.history.push(path);\n    };\n\n    this.validateForm = () => {\n      if (Object.keys(this.state.formData).length) this.SaveForm();else alert(\"please fill out the form :)\");\n    };\n\n    this.SaveForm = () => {\n      unsplash.post(\"/SaveData\", {\n        data: this.state.formData,\n        id: this.state.id\n      }).then(response => {\n        if (response.success) console.log(\"Data submitted successfully: \", response);\n      }).catch(error => {\n        console.log(\"got errr while posting data\", error);\n      });\n      this.nextPath(\"/\");\n    };\n\n    this.ChangeVal = (label, e) => {\n      const fields = _objectSpread({}, this.state.formData);\n\n      fields[label] = e.target.value;\n      this.setState({\n        formData: fields\n      });\n    };\n\n    this.state = {\n      id: props.match.params.id,\n      Schema: [],\n      flag: false,\n      formData: []\n    };\n    this.initialStateformData = _objectSpread({}, this.state.formData);\n  }\n\n  async getFormDetails() {\n    await unsplash.post('/getFormSchema', {\n      id: this.props.match.params.id\n    }).then(response => {\n      if (response.data.success === true) {\n        var schema = JSON.parse(response.data.data[0].formSchema);\n        this.setState({\n          Schema: schema\n        });\n        this.setState({\n          flag: true\n        });\n      } else console.log(response);\n    }).catch(error => {\n      console.log(\"got error while posting data\", error);\n    });\n    console.log(this.state.Schema);\n  }\n\n  resetForm() {\n    this.setState(this.initialStateformData);\n  }\n\n  render() {\n    if (this.state.flag) {\n      result = this.state.Schema.properties.map((item, index) => {\n        return React.createElement(FieldsViewer, {\n          key: index,\n          label: item.label,\n          type: item.type,\n          handleChange: this.ChangeVal.bind(this, item.label),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 81\n          },\n          __self: this\n        });\n      });\n    }\n\n    return React.createElement(\"div\", {\n      className: \"ui segment\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      style: {\n        padding: \"80px\",\n        fontSize: \"30px\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      className: \"ui header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }, this.state.Schema.title)), React.createElement(\"form\", {\n      onSubmit: this.onFormSubmit,\n      className: \"ui form\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }, this.state.flag && [result], React.createElement(\"div\", {\n      style: DivButtonstyles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      style: ButtonDonestyles,\n      type: \"submit\",\n      className: \"ui button\",\n      onClick: this.validateForm,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }, \"Done!\"))), React.createElement(\"div\", {\n      style: DivButtonstyles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      style: Buttonstyles,\n      className: \"ui button\",\n      onClick: () => this.nextPath('/'),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }, \"Back\")));\n  }\n\n}\n\nconst DivButtonstyles = {\n  alignItems: \"center\",\n  display: \"flex\",\n  flexDirection: \"column\",\n  alignItems: \"center\",\n  justifyContent: \"center\"\n};\nconst ButtonDonestyles = {\n  width: \"17em\",\n  marginTop: \"50px\",\n  background: \"#D7BDE2 \"\n};\nconst Buttonstyles = {\n  width: \"13em\",\n  marginTop: \"30px\",\n  background: \"#D7BDE2 \"\n};\nexport default FormViewer;","map":{"version":3,"sources":["C:\\Users\\User\\Desktop\\react\\formBuilder\\form-builder\\src\\components\\FormViewer.js"],"names":["React","unsplash","FieldsViewer","result","FormViewer","Component","constructor","props","componentDidMount","getFormDetails","onFormSubmit","e","preventDefault","nextPath","path","history","push","validateForm","Object","keys","state","formData","length","SaveForm","alert","post","data","id","then","response","success","console","log","catch","error","ChangeVal","label","fields","target","value","setState","match","params","Schema","flag","initialStateformData","schema","JSON","parse","formSchema","resetForm","render","properties","map","item","index","type","bind","padding","fontSize","title","DivButtonstyles","ButtonDonestyles","Buttonstyles","alignItems","display","flexDirection","justifyContent","width","marginTop","background"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport unsplash from '../api/unsplash';\r\nimport FieldsViewer from './FieldsViewer';\r\nvar result;\r\nclass FormViewer extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            id:props.match.params.id,\r\n            Schema:[],\r\n            flag:false,\r\n            formData:[]\r\n\r\n        }\r\n        this.initialStateformData = { ...this.state.formData } \r\n    }\r\n     componentDidMount=async()=>{\r\n        this.getFormDetails();\r\n    }\r\n    async getFormDetails(){\r\n        await unsplash.post('/getFormSchema',{\r\n            id:this.props.match.params.id\r\n        }).then((response)=> {\r\n            if(response.data.success===true){\r\n                var schema=JSON.parse(response.data.data[0].formSchema);\r\n                this.setState({Schema:schema});\r\n                this.setState({flag:true});\r\n            }\r\n            else\r\n            console.log(response);\r\n    }).catch((error)=> {\r\n        console.log(\"got error while posting data\", error);\r\n     });\r\n     console.log(this.state.Schema);\r\n    }\r\n    onFormSubmit=(e)=>{\r\n        //prevent the page refreshing every 'enter' press \r\n        e.preventDefault();\r\n\r\n    }\r\n    nextPath=(path)=>{\r\n        this.props.history.push(path);\r\n    }\r\n    validateForm=()=>\r\n    {\r\n        if(Object.keys(this.state.formData).length)\r\n            this.SaveForm();\r\n        else\r\n        alert(\"please fill out the form :)\");\r\n    }\r\n    SaveForm=()=>\r\n    {\r\n        unsplash.post(\"/SaveData\",{\r\n            data: this.state.formData,\r\n            id:this.state.id\r\n        }).then((response)=> {\r\n            if(response.success)\r\n                console.log(\"Data submitted successfully: \", response);\r\n                \r\n        }).catch((error)=> {\r\n           console.log(\"got errr while posting data\", error);\r\n        });\r\n        \r\n        this.nextPath(\"/\");\r\n    }\r\n    ChangeVal=(label,e)=>{\r\n\r\n        const fields={...this.state.formData}\r\n        fields[label]= e.target.value;\r\n        this.setState({formData:fields});\r\n    }\r\n\r\n    resetForm(){\r\n        this.setState(this.initialStateformData );\r\n    }\r\n    render(){  \r\n        if(this.state.flag){\r\n            result=this.state.Schema.properties.map((item, index)=>{\r\n\r\n                return(\r\n                <FieldsViewer\r\n                    key={index} \r\n                    label={item.label}\r\n                    type={item.type}\r\n                    handleChange={this.ChangeVal.bind(this, item.label)}\r\n                        />\r\n            \r\n                        )})\r\n            }\r\n        return(\r\n            <div className=\"ui segment\">\r\n                <div style={{padding:\"80px\",fontSize : \"30px\"}}>\r\n                    <h1 className=\"ui header\">{this.state.Schema.title}</h1>\r\n                </div>\r\n                <form onSubmit={this.onFormSubmit}  className=\"ui form\"> \r\n                {     \r\n                      this.state.flag && [result]\r\n                }\r\n                 <div style={DivButtonstyles}>\r\n                 <button \r\n                    style={ButtonDonestyles}\r\n                    type='submit'\r\n                    className=\"ui button\"\r\n                    onClick={this.validateForm}>\r\n                       Done!\r\n                    </button>\r\n                    </div>\r\n                </form>\r\n                <div style={DivButtonstyles}>\r\n                <button \r\n                    style={Buttonstyles}\r\n                    className=\"ui button\"\r\n                    onClick={()=>this.nextPath('/')}>\r\n                    Back\r\n            </button>\r\n            </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst DivButtonstyles={\r\n \r\n    alignItems : \"center\", \r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\"\r\n    \r\n}\r\nconst ButtonDonestyles={\r\n \r\n    width:\"17em\",\r\n    marginTop:\"50px\",\r\n    background:\"#D7BDE2 \" \r\n    \r\n}\r\nconst Buttonstyles={\r\n \r\n    width:\"13em\",\r\n    marginTop:\"30px\",\r\n    background:\"#D7BDE2 \" \r\n    \r\n}\r\n\r\nexport default FormViewer;\r\n"]},"metadata":{},"sourceType":"module"}